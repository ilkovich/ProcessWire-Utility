<?php
class WireUtility extends WireData implements Module {
    public static function getModuleInfo() {
        return array(
            'title' => 'WireUtility', 
            'version' => 001,
            'summary' => 'Utility functions for processwire',
            'singular' => true, 
            'autoload' => true, 
            'permission' => "",
        );
    }

    public function init() {
		$class = $this->className();
        define('WIRE_UTILITY_PATH', $this->config->paths->$class);
        spl_autoload_register('WireUtilityLoader');
    } 

    /**
     * Process the input from a submitted Page Edit form, delegating to other methods where appropriate
     *
     */
    public function ___processInput(Page $page, Inputfield $form, $level = 0) {
        static $skipFields = array(
            'sortfield_reverse', 
            'submit_publish', 
            'submit_save',
        );

        if(!$level) $form->processInput($this->input->post);

        foreach($form as $inputfield) {

            $name = $inputfield->attr('name');
            if(in_array($name, $skipFields)) continue; 
            //if(!$page->editable($name)) { continue; }
            //if($inputfield instanceof InputfieldFile) continue;

            if($name == 'sortfield' && $this->useChildren) {
                $this->processInputSortfield($inputfield) ;
                continue;
            }

            if($this->useSettings) { 

                if($name == 'template') { 
                    $this->processInputTemplate($inputfield); 
                    continue; 
                }

                if($name == 'status' && $this->processInputStatus($inputfield)) continue; 
            }

            $page->set($name, $inputfield->value);

            if($inputfield instanceof InputfieldWrapper && count($inputfield->getChildren())) $this->processInput($page, $inputfield, $level + 1); 
        }
    }

    public function ___require($form, $fields) {
        foreach($fields as $fieldName) {
            $field = $form->get($fieldName);
            if(!$field) continue;
            $value = $field->attr('value');

            if( 
                ($value instanceof PageArray && !$value->count()) ||  
                empty($value)
            ) 
            $field->error(_("{$field->label} is required"));
        }
    }

    public function createInputFields(array $fieldConfig, $data) {
        //Initialize fields
        $inputfields = new InputfieldWrapper();
        foreach($fieldConfig as $name => $config ) {
            if(!isset($data[$name])) $data[$name] = isset($config['defaultValue']) ? $config['defaultValue'] : '';
            $type = isset($config['type']) ? $config['type'] : 'InputfieldText';
            $f = wire('modules')->get($type);
            $f->attr('id+name', $name);
            $f->label = $config['label'];
            $f->description = isset($config['description']) ? $config['description'] : '';

            //skip populating password field, unless we have post data
            if($name !== 'password')
                $f->value = $data[$name];

            if(isset($config['attributes'])) 
                foreach($config['attributes'] as $attr => $value) $f->attr($attr, $value);

            $inputfields->append($f);
        }

        $password = wire('input')->post->password;
        if(empty($password)) 
            wire('input')->post->password=$data['password'];

        return $inputfields;
    }
}

function WireUtilityLoader($className) {
	$file = WIRE_UTILITY_PATH . "include/$className.php"; 
	if(is_file($file)) {
		require($file); 
    } 
}
